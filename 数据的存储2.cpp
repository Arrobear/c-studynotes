#include<stdio.h>
//请简述大端字节序和小端字节序的概念，设计一个小程序来判断当前机器的字节序

//int main()
//{
//	int a = 1;
//	char* p = (char*)&a;
//	if (*p == 1)
//	{
//		printf("小端");
//	}
//	if (*p == 0)
//	{
//		printf("大端");
//	}
//	return 0;
//}

//判断以下代码的输出结果：
//int main()
//{
//	char a = -1;
//	signed char b = -1;
//	unsigned char c = -1;
//	printf("a=%d,b=%d,c=%d\n", a, b, c);//-1,-1,255
//	return 0;
//}
// 1.char 到底是 singned char 还是unsigned char？
// c 语言标准并没有规定，取决于编译器
// int 是 signed int ！！
// short 是 signed short ！！

//int main()
//{
//	char a = -128;
//	//10000000000000000000000010000000
//	//11111111111111111111111101111111
//	//11111111111111111111111110000000
//	//10000000
//	//整型提升(按照原符号位进行)：
//	//11111111111111111111111110000000
//	printf("%u \n", a);
//	return 0;
//}

//int main()
//{
//	char a = 128;
//	//00000000000000000000000010000000
//	//10000000
//	//11111111111111111111111110000000
//	//a.如果是无符号数，则高位直接补0；
//	//b.如果是有符号数，则高位全补符号位。
//	printf("%u\n", a);
//	return 0;
//}

//char 类型的取值范围:-128――127
//00000000
//00000001
//...
//01111111//127
//10000000//-128
// -128:
// 100000000000000000000000010000000
// 111111111111111111111111111111111
// 111111111111111111111111110000000
//10000001//-127
//...
//11111111//-1

//int main()
//{
//	int i = -20;
//	unsigned int j = 10;
//	// i:
//	// 10000000000000000000000000010100
//	// 11111111111111111111111111101011
//	// 11111111111111111111111111101100
//	// j:
//	// 00000000000000000000000000001010
//	// i+j:
//	// 11111111111111111111111111110110(补码)
//	// 11111111111111111111111111110101(反码)
//	// 10000000000000000000000000001010(原码)：-10
//	printf("%d\n", i + j);//-10
//	return 0;
//}